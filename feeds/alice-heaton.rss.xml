<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Alice/Development Notes - Alice Heaton</title><link>https://aliceh75.github.io/</link><description></description><lastBuildDate>Tue, 11 Dec 2018 00:00:00 +0000</lastBuildDate><item><title>Measuring delay when using webview with Go</title><link>https://aliceh75.github.io/measuring-delay-when-using-webview-with-go.html</link><description>&lt;p&gt;Serge Zaitsev's &lt;a href="https://github.com/zserge/webview"&gt;webview&lt;/a&gt; library allows us to use a native browser webview in applications written in &lt;a href="https://golang.org/"&gt;the Go programming language&lt;/a&gt;. Amongst other things it allows us to invoke Go methods from the webview's Javascript code, and I wanted to measure how much delay that would introduce.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alice Heaton</dc:creator><pubDate>Tue, 11 Dec 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:aliceh75.github.io,2018-12-11:/measuring-delay-when-using-webview-with-go.html</guid><category>go</category><category>webview</category></item><item><title>Using modules for workspaces in Go</title><link>https://aliceh75.github.io/using-modules-for-workspaces-in-golang.html</link><description>&lt;p&gt;As of Go 1.11, the Go programming language has (experimental) &lt;a href="https://golang.org/doc/go1.11#modules"&gt;support for modules&lt;/a&gt;. This addresses a number of needs - such as ensuring semantic versioning, ensuring reproducible builds, etc. Here I look specifically at how modules help replace the need for &lt;code&gt;$GOPATH&lt;/code&gt; based workspaces.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alice Heaton</dc:creator><pubDate>Sat, 01 Dec 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:aliceh75.github.io,2018-12-01:/using-modules-for-workspaces-in-golang.html</guid><category>go</category></item><item><title>Python asynchronous cooperative mode</title><link>https://aliceh75.github.io/python-asynchronous-cooperative-mode.html</link><description>&lt;p&gt;With the addition of &lt;a href="https://docs.python.org/3.5/library/asyncio.html"&gt;asyncio&lt;/a&gt; in the Python 3.4 stdlib and the &lt;a href="https://www.python.org/dev/peps/pep-0492/"&gt;async/await syntax&lt;/a&gt; in Python 3.5, co-operative asynchronous programing is now an official part of Python. The co-operative asynchronous mode is not complicated to use - but the Python ecosystem is a bit confusing at first. Here I give an introduction to asynchronous programing concepts and eco-system in Python.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alice Heaton</dc:creator><pubDate>Sat, 30 Jun 2018 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:aliceh75.github.io,2018-06-30:/python-asynchronous-cooperative-mode.html</guid><category>python</category><category>async</category></item><item><title>Testing Python asyncio code with SSL</title><link>https://aliceh75.github.io/testing-asyncio-with-ssl.html</link><description>&lt;p&gt;The &lt;a href="https://docs.python.org/3/library/asyncio.html"&gt;asyncio&lt;/a&gt; library introduced in Python 3.4 allows us to write concurrent code running, amongst other things, network clients and servers. Here I show how to unit-test asyncio code to ensure it is possible to use it over an SSL connection.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alice Heaton</dc:creator><pubDate>Thu, 01 Mar 2018 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:aliceh75.github.io,2018-03-01:/testing-asyncio-with-ssl.html</guid><category>python</category><category>async</category><category>asyncio</category></item><item><title>whathammers: a tool to get a quick overview of Apache log files</title><link>https://aliceh75.github.io/whathammers-a-tool-to-get-a-quick-overview-of-apache-log-files.html</link><description>&lt;p&gt;With most websites now using some form of client side analytics, we do not tend to parse and analyse Apache log files automatically any more. However for people managing web-servers they are still our first port of call when troubleshooting issues. To help quickly working out what is happening I wrote a small command line tool to parse and provide statistics out of Apache log files.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alice Heaton</dc:creator><pubDate>Fri, 05 May 2017 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:aliceh75.github.io,2017-05-05:/whathammers-a-tool-to-get-a-quick-overview-of-apache-log-files.html</guid><category>apache</category></item><item><title>State in back and front end web technologies</title><link>https://aliceh75.github.io/state-in-back-and-front-end-web-technologies.html</link><description>&lt;p&gt;Processing user requests in the backend component of websites is something that feels like a mostly solved problem. Doing the same in frontend web applications is on the other hand something that is still being improved on all the time. Here I look at how managing state differs in the two environment, and how this affects application architecture.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alice Heaton</dc:creator><pubDate>Thu, 16 Mar 2017 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:aliceh75.github.io,2017-03-16:/state-in-back-and-front-end-web-technologies.html</guid><category>architecture</category></item><item><title>Setting up a Cordova development environment in Ubuntu</title><link>https://aliceh75.github.io/setting-up-cordova-dev-environmnent-in-ubuntu.html</link><description>&lt;p&gt;While there are many guides on setting up &lt;a href="https://cordova.apache.org/"&gt;Apache Cordova&lt;/a&gt; for Android development on Ubuntu, none seemed to cover all the issues I encountered - it took a combination of resources to get there. I decided to write how I went about setting this up, and the issues I encountered along the way.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alice Heaton</dc:creator><pubDate>Tue, 03 Nov 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:aliceh75.github.io,2015-11-03:/setting-up-cordova-dev-environmnent-in-ubuntu.html</guid><category>cordova</category><category>android</category></item><item><title>Low bandwidth asset management in Djando</title><link>https://aliceh75.github.io/low-bandwidth-asset-management-in-django.html</link><description>&lt;p&gt;Low bandwidth implies high latency - when implementing a site for low bandwidth conditions we must pay attention to the packaging and number of assets we include on each page. Here we look at an approach for combining assets in Django while preserving the relationship between each asset and the code that required it.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alice Heaton</dc:creator><pubDate>Thu, 01 Oct 2015 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:aliceh75.github.io,2015-10-01:/low-bandwidth-asset-management-in-django.html</guid><category>django</category><category>python</category></item><item><title>Re-implementing the CKAN API for performance</title><link>https://aliceh75.github.io/reimplementing-ckan-api-for-performance.html</link><description>&lt;p&gt;&lt;a href="http://ckan.org"&gt;CKAN&lt;/a&gt;, an open source data portal platform, provides an API for fetching everything from datasets to individual records. Here we look at how CKAN's architecture allows developers to transparently re-implement the datastore API, and how this was used to improve performance by switching all searches to using a &lt;a href="https://lucene.apache.org/solr/"&gt;Solr&lt;/a&gt; backend.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alice Heaton</dc:creator><pubDate>Tue, 28 Apr 2015 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:aliceh75.github.io,2015-04-28:/reimplementing-ckan-api-for-performance.html</guid><category>ckan</category><category>python</category></item><item><title>A look into Docker concepts</title><link>https://aliceh75.github.io/a-look-into-docker-concepts.html</link><description>&lt;p&gt;&lt;a href="https://www.docker.com"&gt;Docker&lt;/a&gt; is a tool to help in the deployment of applications across host systems. Virtualization, union file systems, image registries, orchestration services - while Docker is a useful tool for staging and deployment, there is a learning curve to get to grips with the whole ecosystem.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alice Heaton</dc:creator><pubDate>Thu, 12 Feb 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:aliceh75.github.io,2015-02-12:/a-look-into-docker-concepts.html</guid><category>docker</category></item><item><title>Testing a PostgreSQL slave/master cluster using Docker</title><link>https://aliceh75.github.io/testing-postgresql-cluster-using-docker.html</link><description>&lt;p&gt;&lt;a href="https://www.docker.com"&gt;Docker&lt;/a&gt; is extremely useful for deploying packages, but also for creating environments for running functional tests. Here I show how to easily setup a cluster of PostgreSQL servers in slave/master replication using Docker and drive them using the &lt;a href="https://github.com/docker/docker-py"&gt;Docker Python API&lt;/a&gt;.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alice Heaton</dc:creator><pubDate>Mon, 12 Jan 2015 00:00:00 +0000</pubDate><guid isPermaLink="false">tag:aliceh75.github.io,2015-01-12:/testing-postgresql-cluster-using-docker.html</guid><category>postgresql</category><category>docker</category><category>python</category></item><item><title>Dynamic mouse events for PySide</title><link>https://aliceh75.github.io/dynamic-mouse-events-for-pyside.html</link><description>&lt;p&gt;&lt;a href="http://qt-project.org/wiki/PySide"&gt;PySide&lt;/a&gt;, one of the Python bindings for &lt;a href="http://qt-project.org/"&gt;Qt&lt;/a&gt;, uses the same event model as the C++ version of Qt - one that is designed for static languages. Here I show how to implement a layer above PySide's mouse events that provides a more dynamic event model.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alice Heaton</dc:creator><pubDate>Mon, 29 Sep 2014 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:aliceh75.github.io,2014-09-29:/dynamic-mouse-events-for-pyside.html</guid><category>python</category><category>pyside</category></item><item><title>Prioritizing requests in node</title><link>https://aliceh75.github.io/prioritizing-requests-in-node.html</link><description>&lt;p&gt;Node is a great platform when it comes to handling and dispatching numerous concurrent requests. Here I explain how I implemented a proxy which limits the number of concurrent requests per client, and prioritizes the queue of request using user-defined criteria.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alice Heaton</dc:creator><pubDate>Wed, 20 Aug 2014 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:aliceh75.github.io,2014-08-20:/prioritizing-requests-in-node.html</guid><category>node</category></item><item><title>Interrupting urlopen in Python</title><link>https://aliceh75.github.io/interrupting-urlopen-in-python.html</link><description>&lt;p&gt;While the Python ecosystem is replete with libraries for fetching data over the web, none of them give you an easy way to interrupt requests before the queried server has returned the response headers. As more often than not servers will only output response headers once they have the full response at hand, this does not make it possible to release resources early. Here I show a possible implementation based on sockets and Httplib.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alice Heaton</dc:creator><pubDate>Fri, 25 Jul 2014 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:aliceh75.github.io,2014-07-25:/interrupting-urlopen-in-python.html</guid><category>python</category></item><item><title>A Python multi-process task queue</title><link>https://aliceh75.github.io/python-multiprocess-task-queue.html</link><description>&lt;p&gt;Looking to integrate a task queue manager in a service I was implementing, I discarded existing task queues and libraries as over complex for my need and implemented a simple solution based on existing examples found online.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alice Heaton</dc:creator><pubDate>Fri, 04 Jul 2014 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:aliceh75.github.io,2014-07-04:/python-multiprocess-task-queue.html</guid><category>python</category></item><item><title>Implementing a CKAN permission plugin</title><link>https://aliceh75.github.io/implementing-ckan-permission-plugin.html</link><description>&lt;p&gt;&lt;a href="http://ckan.org"&gt;CKAN&lt;/a&gt; implements a permission system based on roles, permissions and authorization functions which can be overridden by plugins. I used to this to implement the &lt;a href="https://GitHub.com/NaturalHistoryMuseum/ckanext-userdatasets"&gt;ckanext-userdatasets&lt;/a&gt; plugin. The aim of this plugin is to allow certain types of users to create datasets in an organization without having the permission to edit or delete other users' datasets. Here I describe how I went about implementing this plugin.&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Alice Heaton</dc:creator><pubDate>Mon, 23 Jun 2014 00:00:00 +0100</pubDate><guid isPermaLink="false">tag:aliceh75.github.io,2014-06-23:/implementing-ckan-permission-plugin.html</guid><category>ckan</category></item></channel></rss>